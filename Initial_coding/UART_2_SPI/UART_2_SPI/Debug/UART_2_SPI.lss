
UART_2_SPI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000100  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000279  00800100  00800100  00000174  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  00000174  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000090  00000000  00000000  00000840  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000020  00000000  00000000  000008d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000000b6  00000000  00000000  000008f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000022e  00000000  00000000  000009a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000112  00000000  00000000  00000bd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000230  00000000  00000000  00000ce6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000060  00000000  00000000  00000f18  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000187  00000000  00000000  00000f78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000054  00000000  00000000  000010ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 0000001e  00000000  00000000  00001153  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>
  1e:	1a c0       	rjmp	.+52     	; 0x54 <__bad_interrupt>
  20:	19 c0       	rjmp	.+50     	; 0x54 <__bad_interrupt>
  22:	18 c0       	rjmp	.+48     	; 0x54 <__bad_interrupt>
  24:	17 c0       	rjmp	.+46     	; 0x54 <__bad_interrupt>
  26:	16 c0       	rjmp	.+44     	; 0x54 <__bad_interrupt>
  28:	15 c0       	rjmp	.+42     	; 0x54 <__bad_interrupt>
  2a:	14 c0       	rjmp	.+40     	; 0x54 <__bad_interrupt>
  2c:	13 c0       	rjmp	.+38     	; 0x54 <__bad_interrupt>
  2e:	12 c0       	rjmp	.+36     	; 0x54 <__bad_interrupt>
  30:	11 c0       	rjmp	.+34     	; 0x54 <__bad_interrupt>
  32:	10 c0       	rjmp	.+32     	; 0x54 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_clear_bss>:
  40:	13 e0       	ldi	r17, 0x03	; 3
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a9 37       	cpi	r26, 0x79	; 121
  4c:	b1 07       	cpc	r27, r17
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	1b d0       	rcall	.+54     	; 0x88 <main>
  52:	54 c0       	rjmp	.+168    	; 0xfc <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <Start_SPI>:
	int i;
	char in_buffer;
	char out_buffer;
	
	//Reset
	PORTC = 0x01;
  56:	21 e0       	ldi	r18, 0x01	; 1
  58:	28 b9       	out	0x08, r18	; 8
    //CSN high to low
	PORTC = (0 << PC0);
  5a:	18 b8       	out	0x08, r1	; 8
  5c:	e8 2f       	mov	r30, r24
  5e:	f9 2f       	mov	r31, r25
	//Clock in the command and out the status
	for(i=0;i < 8;i++)
  60:	80 e0       	ldi	r24, 0x00	; 0
  62:	90 e0       	ldi	r25, 0x00	; 0
	{
		//Setup MOSI
		PORTC = (command[i] << PC2);
		//Rising clock edge
		PORTC = (1 << PC1);
  64:	32 e0       	ldi	r19, 0x02	; 2
/*
This takes the command in for further register read/writes
and returns the status register 
WARNING: The SPI protocol is not finished by this function it must be proceeded by a clean up
*/
void Start_SPI(char command[8])
  66:	df 01       	movw	r26, r30
	PORTC = (0 << PC0);
	//Clock in the command and out the status
	for(i=0;i < 8;i++)
	{
		//Setup MOSI
		PORTC = (command[i] << PC2);
  68:	21 91       	ld	r18, Z+
  6a:	22 0f       	add	r18, r18
  6c:	22 0f       	add	r18, r18
  6e:	28 b9       	out	0x08, r18	; 8
		//Rising clock edge
		PORTC = (1 << PC1);
  70:	38 b9       	out	0x08, r19	; 8
		//Read in MISO
		PORTC = (command[i] << PC3);
  72:	2c 91       	ld	r18, X
  74:	22 0f       	add	r18, r18
  76:	22 0f       	add	r18, r18
  78:	22 0f       	add	r18, r18
  7a:	28 b9       	out	0x08, r18	; 8
		//Falling clock edge
		PORTC = (0 << PC1);
  7c:	18 b8       	out	0x08, r1	; 8
	//Reset
	PORTC = 0x01;
    //CSN high to low
	PORTC = (0 << PC0);
	//Clock in the command and out the status
	for(i=0;i < 8;i++)
  7e:	01 96       	adiw	r24, 0x01	; 1
  80:	88 30       	cpi	r24, 0x08	; 8
  82:	91 05       	cpc	r25, r1
  84:	81 f7       	brne	.-32     	; 0x66 <Start_SPI+0x10>
		//Falling clock edge
		PORTC = (0 << PC1);
	}
	
	return in_buffer;
}
  86:	08 95       	ret

00000088 <main>:
char tx_address[4][8];
char rx_payload[32][8];
	
	
int main(void)
{
  88:	ff 92       	push	r15
  8a:	0f 93       	push	r16
  8c:	1f 93       	push	r17
  8e:	df 93       	push	r29
  90:	cf 93       	push	r28
  92:	cd b7       	in	r28, 0x3d	; 61
  94:	de b7       	in	r29, 0x3e	; 62
  96:	28 97       	sbiw	r28, 0x08	; 8
  98:	0f b6       	in	r0, 0x3f	; 63
  9a:	f8 94       	cli
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	0f be       	out	0x3f, r0	; 63
  a0:	cd bf       	out	0x3d, r28	; 61
	DDRC = 0x07;//Setup for SPI
  a2:	87 e0       	ldi	r24, 0x07	; 7
  a4:	87 b9       	out	0x07, r24	; 7
	
	char input_byte[8];
	
    while(1)
    {
		input_byte[0] = 1;
  a6:	ff 24       	eor	r15, r15
  a8:	f3 94       	inc	r15
		input_byte[3] = 0;
		input_byte[4] = 1;
		input_byte[5] = 0;
		input_byte[6] = 0;
		input_byte[7] = 1;
		Start_SPI(input_byte);
  aa:	8e 01       	movw	r16, r28
  ac:	0f 5f       	subi	r16, 0xFF	; 255
  ae:	1f 4f       	sbci	r17, 0xFF	; 255
	
	char input_byte[8];
	
    while(1)
    {
		input_byte[0] = 1;
  b0:	f9 82       	std	Y+1, r15	; 0x01
		input_byte[1] = 1;
  b2:	fa 82       	std	Y+2, r15	; 0x02
		input_byte[2] = 0;
  b4:	1b 82       	std	Y+3, r1	; 0x03
		input_byte[3] = 0;
  b6:	1c 82       	std	Y+4, r1	; 0x04
		input_byte[4] = 1;
  b8:	fd 82       	std	Y+5, r15	; 0x05
		input_byte[5] = 0;
  ba:	1e 82       	std	Y+6, r1	; 0x06
		input_byte[6] = 0;
  bc:	1f 82       	std	Y+7, r1	; 0x07
		input_byte[7] = 1;
  be:	f8 86       	std	Y+8, r15	; 0x08
		Start_SPI(input_byte);
  c0:	c8 01       	movw	r24, r16
  c2:	c9 df       	rcall	.-110    	; 0x56 <Start_SPI>
  c4:	f5 cf       	rjmp	.-22     	; 0xb0 <main+0x28>

000000c6 <USART_Init>:

//////////////////////////////////////////////////////////////////////////////USART CODE
void USART_Init( unsigned int ubrr)
{
	/*Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
  c6:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char)ubrr;
  ca:	80 93 c4 00 	sts	0x00C4, r24
	/*Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
  ce:	88 e1       	ldi	r24, 0x18	; 24
  d0:	80 93 c1 00 	sts	0x00C1, r24
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
  d4:	8e e0       	ldi	r24, 0x0E	; 14
  d6:	80 93 c2 00 	sts	0x00C2, r24
}
  da:	08 95       	ret

000000dc <USART_Transmit>:

void USART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) )
  dc:	e0 ec       	ldi	r30, 0xC0	; 192
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	90 81       	ld	r25, Z
  e2:	95 ff       	sbrs	r25, 5
  e4:	fd cf       	rjmp	.-6      	; 0xe0 <USART_Transmit+0x4>
	;
	/* Put data into buffer, sends the data */
	UDR0 = data;
  e6:	80 93 c6 00 	sts	0x00C6, r24
}
  ea:	08 95       	ret

000000ec <USART_Receive>:

unsigned char USART_Receive( void )
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) )
  ec:	e0 ec       	ldi	r30, 0xC0	; 192
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	88 23       	and	r24, r24
  f4:	ec f7       	brge	.-6      	; 0xf0 <USART_Receive+0x4>
	;
	/* Get and return received data from buffer */
	return UDR0;
  f6:	80 91 c6 00 	lds	r24, 0x00C6
}
  fa:	08 95       	ret

000000fc <_exit>:
  fc:	f8 94       	cli

000000fe <__stop_program>:
  fe:	ff cf       	rjmp	.-2      	; 0xfe <__stop_program>
